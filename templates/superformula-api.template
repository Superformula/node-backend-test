AWSTemplateFormatVersion: '2010-09-09'
Description: Superformula RESTful API

Parameters:

  ApiKeyRequired:
    Type: String
    Description: Would you like to require an API key for the Rest API? If enabled, this will generate a new API key for you. Select 'Yes' if so.
    Default: 'Yes'
    AllowedValues:
      - 'Yes'
      - 'No'

  AlarmsEnabled:
    Type: String
    Description: Would you like to enable alarms? Select 'Yes' if so.
    Default: 'Yes'
    AllowedValues:
      - 'Yes'
      - 'No'

  AlarmApiLatencyThreshold:
    Type: Number
    Description: If alarms are enabled, what latency (millisenconds) would you like to trigger an alarm?
    Default: 1000
    MinValue: 0

  AlarmHighRequestsThreshold:
    Type: Number
    Description: If alarms are enabled, how many requests (count) per minute would you like to trigger an alarm?
    Default: 1000
    MinValue: 0

  AlarmHigh4xxErrorRateThreshold:
    Type: Number
    Description: If alarms are enabled, what 4xx error rate (percentage) would you like to trigger an alarm?
    Default: 25
    MinValue: 0

  AlarmHigh5xxErrorRateThreshold:
    Type: Number
    Description: If alarms are enabled, what 5xx error rate (percentage) would you like to trigger an alarm?
    Default: 10
    MinValue: 0

  AutoScalingEnabled:
    Type: String
    Description: Would you like enable auto-scaling for DyanmoDB? Select 'Yes' if so.
    Default: 'Yes'
    AllowedValues:
      - 'Yes'
      - 'No'

  MinimumReadCapacityUnits:
    Type: Number
    Description: Minimum capacity units used for DynamoDB reads. If auto-scaling is not enabled, this value will be used for the table's read capacity units.
    Default: 5
    MinValue: 1
    MaxValue: 40000

  MaximumReadCapacityUnits:
    Type: Number
    Description: Maximum capacity units used for DynamoDB reads.
    Default: 100
    MinValue: 1
    MaxValue: 40000

  MinimumWriteCapacityUnits:
    Type: Number
    Description: Minimum capacity units used for DynamoDB writes. If auto-scaling is not enabled, this value will be used for the table's read capacity units.
    Default: 5
    MinValue: 1
    MaxValue: 40000

  MaximumWriteCapacityUnits:
    Type: Number
    Description: Maximum capacity units used for DynamoDB writes.
    Default: 100
    MinValue: 1
    MaxValue: 40000


Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Authentication
        Parameters:
          - ApiKeyRequired
      - Label:
          default: Alerting
        Parameters:
          - AlarmsEnabled
          - AlarmApiLatencyThreshold
          - AlarmHighRequestsThreshold
          - AlarmHigh4xxErrorRateThreshold
          - AlarmHigh5xxErrorRateThreshold
      - Label:
          default: DynamoDB
        Parameters:
          - AutoScalingEnabled
          - MinimumReadCapacityUnits
          - MaximumReadCapacityUnits
          - MinimumWriteCapacityUnits
          - MaximumWriteCapacityUnits

Conditions:

  RestApiKeyCondition: !Equals [ !Ref ApiKeyRequired, 'Yes' ]

  AlarmsEnabledCondition: !Equals [ !Ref AlarmsEnabled, 'Yes' ]

  AutoScalingEnabledCondition: !Equals [ !Ref AutoScalingEnabled, 'Yes' ]

Mappings:

  ApiGateway:
    IntegrationRequestTemplates:
      Default: |
        #set($allParams = $input.params())
        {
          "body": $input.json('$'),
          "method": "$context.httpMethod",
          "uri": "$context.resourcePath",
          "params": {
            #foreach($type in $allParams.keySet())
              #set($params = $allParams.get($type))
              "$type": {
                #foreach($paramName in $params.keySet())
                  "$paramName": "$util.escapeJavaScript($params.get($paramName))"
                  #if($foreach.hasNext),#end
                #end
              }
              #if($foreach.hasNext),#end
            #end
          }
        }
    IntegrationResponseTemplates:
      Success: |
        {"data":$input.json('$')}
      Error: |
        {"errors":$input.path('$.errorMessage')}
      Options: |
        {"statusCode":200}

Resources:

  ##
  # Api Documentation Resources
  ##
  ApiDocumentationBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  ApiDocumentationBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ApiDocumentationBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Principal: "*"
            Resource: !Sub arn:aws:s3:::${ApiDocumentationBucket}/*

  ##
  # Rest Api Resources
  ##
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Sub ${AWS::StackName}

  RestApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref RestApiDeployment
      RestApiId: !Ref RestApi
      StageName: prod

  RestApiRootResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: api
      RestApiId: !Ref RestApi

  RestApiV1Resource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref RestApiRootResource
      PathPart: v1
      RestApiId: !Ref RestApi

  RestApiUserCollectionResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref RestApiV1Resource
      PathPart: users
      RestApiId: !Ref RestApi

  RestApiUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref RestApiUserCollectionResource
      PathPart: '{id}'
      RestApiId: !Ref RestApi

  ##
  # DynamoDB Table Resources
  ##
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-Users
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref MinimumReadCapacityUnits
        WriteCapacityUnits: !Ref MinimumWriteCapacityUnits

  AutoScalingManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Condition: AutoScalingEnabledCondition
    Properties:
      Path: '/'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:DescribeTable
              - dynamodb:UpdateTable
              - cloudwatch:PutMetricAlarm
              - cloudwatch:DescribeAlarm
              - cloudwatch:GetMetricStatistics
              - cloudwatch:SetAlarmState
              - cloudwatch:DeleteAlarms
            Resource: '*'

  AutoScalingRole:
    Type: AWS::IAM::Role
    Condition: AutoScalingEnabledCondition
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: application-autoscaling.amazonaws.com
      ManagedPolicyArns:
        - !Ref AutoScalingManagedPolicy

  UsersTableReadCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Condition: AutoScalingEnabledCondition
    Properties:
      MaxCapacity: !Ref MaximumReadCapacityUnits
      MinCapacity: !Ref MinimumReadCapacityUnits
      ResourceId: !Sub table/${AWS::StackName}-Users
      RoleARN: !GetAtt AutoScalingRole.Arn
      ScalableDimension: dynamodb:table:ReadCapacityUnits
      ServiceNamespace: dynamodb

  UserTableReadScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Condition: AutoScalingEnabledCondition
    Properties:
      PolicyName: WriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref UsersTableReadCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization

  UsersTableWriteCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Condition: AutoScalingEnabledCondition
    Properties:
      MaxCapacity: !Ref MaximumWriteCapacityUnits
      MinCapacity: !Ref MinimumWriteCapacityUnits
      ResourceId: !Sub table/${AWS::StackName}-Users
      RoleARN: !GetAtt AutoScalingRole.Arn
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb

  UserTableWriteScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Condition: AutoScalingEnabledCondition
    Properties:
      PolicyName: WriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref UsersTableWriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization

  ##
  # Lambda Permission Resources
  ##
  CloudWatchLogsManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*

  DynamoDbManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:DeleteItem
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Resource:
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${UsersTable}
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${UsersTable}/index/*

  LambdaManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-CloudFrontCreateInvalidation

  LambdaFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - !Ref CloudWatchLogsManagedPolicy
        - !Ref DynamoDbManagedPolicy
        - !Ref LambdaManagedPolicy

  ##
  # Users Create Api Endpoint Resources
  ##
  UsersCreateLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: {{LAMBDAS_RELEASE_BUCKET}}
        S3Key: users-create.zip
      FunctionName: !Sub ${AWS::StackName}-UsersCreate
      Handler: index.handler
      Environment:
        Variables:
          STACK_NAME: !Ref AWS::StackName
      Role: !GetAtt LambdaFunctionsRole.Arn
      Runtime: nodejs10.x
      Timeout: 30

  UsersCreateLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt UsersCreateLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/POST/api/v1/users
    DependsOn: UsersCreateLambdaFunction

  UsersCreateApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: !If [ RestApiKeyCondition, true, false ]
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 201
            ResponseTemplates:
              application/json: !FindInMap [ApiGateway, IntegrationResponseTemplates, Success]
          - StatusCode: 422
            SelectionPattern: .*"status":422.*
            ResponseTemplates:
              application/json: !FindInMap [ApiGateway, IntegrationResponseTemplates, Error]
          - StatusCode: 500
            SelectionPattern: .*"status":500.*
            ResponseTemplates:
              application/json: !FindInMap [ApiGateway, IntegrationResponseTemplates, Error]
        RequestTemplates:
          application/json: !FindInMap [ApiGateway, IntegrationRequestTemplates, Default]
        Type: AWS
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function: !GetAtt UsersCreateLambdaFunction.Arn
      MethodResponses:
        - StatusCode: 201
        - StatusCode: 422
        - StatusCode: 500
      ResourceId: !Ref RestApiUserCollectionResource
      RestApiId: !Ref RestApi
    DependsOn: UsersCreateLambdaFunction

  ##
  # Users Delete Api Endpoint Resources
  ##
  UsersDeleteLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: {{LAMBDAS_RELEASE_BUCKET}}
        S3Key: users-delete.zip
      FunctionName: !Sub ${AWS::StackName}-UsersDelete
      Handler: index.handler
      Environment:
        Variables:
          STACK_NAME: !Ref AWS::StackName
      Role: !GetAtt LambdaFunctionsRole.Arn
      Runtime: nodejs10.x
      Timeout: 30

  UsersDeleteLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt UsersDeleteLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/DELETE/api/v1/users/{id}
    DependsOn: UsersDeleteLambdaFunction

  UsersDeleteApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: !If [ RestApiKeyCondition, true, false ]
      AuthorizationType: NONE
      HttpMethod: DELETE
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 204
          - StatusCode: 404
            SelectionPattern: .*"status":404.*
            ResponseTemplates:
              application/json: !FindInMap [ApiGateway, IntegrationResponseTemplates, Error]
          - StatusCode: 500
            SelectionPattern: .*"status":500.*
            ResponseTemplates:
              application/json: !FindInMap [ApiGateway, IntegrationResponseTemplates, Error]
        RequestTemplates:
          application/json: !FindInMap [ApiGateway, IntegrationRequestTemplates, Default]
        Type: AWS
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function: !GetAtt UsersDeleteLambdaFunction.Arn
      MethodResponses:
        - StatusCode: 204
        - StatusCode: 404
        - StatusCode: 500
      ResourceId: !Ref RestApiUserResource
      RestApiId: !Ref RestApi
    DependsOn: UsersDeleteLambdaFunction

  ##
  # Users Get Api Endpoint Resources
  ##
  UsersGetLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: {{LAMBDAS_RELEASE_BUCKET}}
        S3Key: users-get.zip
      FunctionName: !Sub ${AWS::StackName}-UsersGet
      Handler: index.handler
      Environment:
        Variables:
          STACK_NAME: !Ref AWS::StackName
      Role: !GetAtt LambdaFunctionsRole.Arn
      Runtime: nodejs10.x
      Timeout: 30

  UsersGetLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt UsersGetLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/api/v1/users/{id}
    DependsOn: UsersGetLambdaFunction

  UsersGetApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: !If [ RestApiKeyCondition, true, false ]
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: !FindInMap [ApiGateway, IntegrationResponseTemplates, Success]
          - StatusCode: 404
            SelectionPattern: .*"status":404.*
            ResponseTemplates:
              application/json: !FindInMap [ApiGateway, IntegrationResponseTemplates, Error]
          - StatusCode: 500
            SelectionPattern: .*"status":500.*
            ResponseTemplates:
              application/json: !FindInMap [ApiGateway, IntegrationResponseTemplates, Error]
        RequestTemplates:
          application/json: !FindInMap [ApiGateway, IntegrationRequestTemplates, Default]
        Type: AWS
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function: !GetAtt UsersGetLambdaFunction.Arn
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 404
        - StatusCode: 500
      ResourceId: !Ref RestApiUserResource
      RestApiId: !Ref RestApi
    DependsOn: UsersGetLambdaFunction

  ##
  # Users List Api Endpoint Resources
  ##
  UsersListLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: {{LAMBDAS_RELEASE_BUCKET}}
        S3Key: users-list.zip
      FunctionName: !Sub ${AWS::StackName}-UsersList
      Handler: index.handler
      Environment:
        Variables:
          STACK_NAME: !Ref AWS::StackName
      Role: !GetAtt LambdaFunctionsRole.Arn
      Runtime: nodejs10.x
      Timeout: 30

  UsersListLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt UsersListLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/api/v1/users
    DependsOn: UsersListLambdaFunction

  UsersListApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: !If [ RestApiKeyCondition, true, false ]
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: !FindInMap [ApiGateway, IntegrationResponseTemplates, Success]
          - StatusCode: 500
            SelectionPattern: .*"status":500.*
            ResponseTemplates:
              application/json: !FindInMap [ApiGateway, IntegrationResponseTemplates, Error]
        RequestTemplates:
          application/json: !FindInMap [ApiGateway, IntegrationRequestTemplates, Default]
        Type: AWS
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function: !GetAtt UsersListLambdaFunction.Arn
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 500
      ResourceId: !Ref RestApiUserCollectionResource
      RestApiId: !Ref RestApi
    DependsOn: UsersListLambdaFunction

  ##
  # Users Update Api Endpoint Resources
  ##
  UsersUpdateLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: {{LAMBDAS_RELEASE_BUCKET}}
        S3Key: users-update.zip
      FunctionName: !Sub ${AWS::StackName}-UsersUpdate
      Handler: index.handler
      Environment:
        Variables:
          STACK_NAME: !Ref AWS::StackName
      Role: !GetAtt LambdaFunctionsRole.Arn
      Runtime: nodejs10.x
      Timeout: 30

  UsersUpdateLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt UsersUpdateLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/PATCH/api/v1/users/{id}
    DependsOn: UsersUpdateLambdaFunction

  UsersUpdateApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: !If [ RestApiKeyCondition, true, false ]
      AuthorizationType: NONE
      HttpMethod: PATCH
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 201
            ResponseTemplates:
              application/json: !FindInMap [ApiGateway, IntegrationResponseTemplates, Success]
          - StatusCode: 404
            SelectionPattern: .*"status":404.*
            ResponseTemplates:
              application/json: !FindInMap [ApiGateway, IntegrationResponseTemplates, Error]
          - StatusCode: 422
            SelectionPattern: .*"status":422.*
            ResponseTemplates:
              application/json: !FindInMap [ApiGateway, IntegrationResponseTemplates, Error]
          - StatusCode: 500
            SelectionPattern: .*"status":500.*
            ResponseTemplates:
              application/json: !FindInMap [ApiGateway, IntegrationResponseTemplates, Error]
        RequestTemplates:
          application/json: !FindInMap [ApiGateway, IntegrationRequestTemplates, Default]
        Type: AWS
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function: !GetAtt UsersUpdateLambdaFunction.Arn
      MethodResponses:
        - StatusCode: 201
        - StatusCode: 404
        - StatusCode: 422
        - StatusCode: 500
      ResourceId: !Ref RestApiUserResource
      RestApiId: !Ref RestApi
    DependsOn: UsersUpdateLambdaFunction

  ##
  # Users OPTIONS Api Endpoint Resources
  ##
  UserOptionsApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: !If [ RestApiKeyCondition, true, false ]
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
        RequestTemplates:
          application/json: !FindInMap [ApiGateway, IntegrationResponseTemplates, Options]
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
      ResourceId: !Ref RestApiUserResource
      RestApiId: !Ref RestApi

  UserCollectionOptionsApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: !If [ RestApiKeyCondition, true, false ]
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
        RequestTemplates:
          application/json: !FindInMap [ApiGateway, IntegrationResponseTemplates, Options]
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
      ResourceId: !Ref RestApiUserCollectionResource
      RestApiId: !Ref RestApi

  ##
  # Deployment Resources
  ##
  RestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RestApi
    DependsOn:
      - UsersCreateApiMethod
      - UsersDeleteApiMethod
      - UsersGetApiMethod
      - UsersListApiMethod
      - UsersUpdateApiMethod
      - UserOptionsApiMethod
      - UserCollectionOptionsApiMethod

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt ApiDocumentationBucket.DomainName
            Id: !Ref ApiDocumentationBucket
            S3OriginConfig:
              OriginAccessIdentity: !Ref AWS::NoValue
          - DomainName: !Sub ${RestApi}.execute-api.${AWS::Region}.amazonaws.com
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
            Id: !Ref RestApi
            OriginPath: !Sub /${RestApiStage}
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: true
          TargetOriginId: !Ref ApiDocumentationBucket
          ViewerProtocolPolicy: redirect-to-https
        CacheBehaviors:
          - AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            Compress: true
            ForwardedValues:
              Headers:
                - Accept
                - Content-Type
              QueryString: true
            PathPattern: /api/v1/*
            TargetOriginId: !Ref RestApi
            ViewerProtocolPolicy: https-only
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
    DependsOn:
      - ApiDocumentationBucket
      - RestApiDeployment

  DeployApiDocumentationS3ManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: s3:ListBucket
            Resource:
              - !Sub arn:aws:s3:::${ApiDocumentationBucket}
              - arn:aws:s3:::{{DOCS_RELEASE_BUCKET}}
          - Effect: Allow
            Action: s3:GetObject
            Resource:
              - !Sub arn:aws:s3:::${ApiDocumentationBucket}/*
              - arn:aws:s3:::{{DOCS_RELEASE_BUCKET}}/*
          - Effect: Allow
            Action:
              - s3:PutObject
            Resource: !Sub arn:aws:s3:::${ApiDocumentationBucket}/*

  DeployApiDocumentationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - !Ref CloudWatchLogsManagedPolicy
        - !Ref DeployApiDocumentationS3ManagedPolicy

  DeployApiDocumentationLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: {{LAMBDAS_RELEASE_BUCKET}}
        S3Key: deploy-api-docs.zip
      FunctionName: !Sub ${AWS::StackName}-DeployApiDocs
      Handler: index.handler
      Role: !GetAtt DeployApiDocumentationRole.Arn
      Runtime: nodejs10.x
      Timeout: 30

  DeployApiDocumentation:
    Type: Custom::DeployApiDocumentation
    Properties:
      ServiceToken: !GetAtt DeployApiDocumentationLambdaFunction.Arn
      ApiUrl: !Sub https://${CloudFrontDistribution.DomainName}/api/v1
      DestinationBucket: !Ref ApiDocumentationBucket
      SourceBucket: {{DOCS_RELEASE_BUCKET}}
      RewriteFiles:
        - api_data.js
        - api_data.json
        - api_project.js
        - api_project.json
    DependsOn:
      - ApiDocumentationBucket
      - CloudFrontDistribution
      - DeployApiDocumentationLambdaFunction

  ##
  # RestAPI Key Resources
  ##
  RestApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Condition: RestApiKeyCondition
    Properties:
      ApiStages:
        - ApiId: !Ref RestApi
          Stage: prod
    DependsOn:
      - RestApi
      - RestApiDeployment

  RestApiKey:
    Type: AWS::ApiGateway::ApiKey
    Condition: RestApiKeyCondition
    Properties:
      Description: !Sub ${AWS::StackName}-ApiKey
      Enabled: true
      GenerateDistinctId: true
      StageKeys:
        - RestApiId: !Ref RestApi
          StageName: prod
    DependsOn:
      - RestApi
      - RestApiDeployment

  RestApiUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Condition: RestApiKeyCondition
    Properties:
      KeyId: !Ref RestApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref RestApiUsagePlan
    DependsOn:
      - RestApiKey
      - RestApiUsagePlan

  ##
  # CloudFront Cache Invalidation Resources
  ##
  CloudFrontManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: cloudfront:CreateInvalidation
            Resource: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}
    DependsOn: CloudFrontDistribution

  CloudFrontCreateInvalidationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - !Ref CloudFrontManagedPolicy
        - !Ref CloudWatchLogsManagedPolicy

  CloudFrontCreateInvalidationLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: {{LAMBDAS_RELEASE_BUCKET}}
        S3Key: cloudfront-create-invalidation.zip
      FunctionName: !Sub ${AWS::StackName}-CloudFrontCreateInvalidation
      Environment:
        Variables:
          DISTRIBUTION_ID: !Ref CloudFrontDistribution
      Handler: index.handler
      Role: !GetAtt CloudFrontCreateInvalidationRole.Arn
      Runtime: nodejs10.x
      Timeout: 30
    DependsOn: CloudFrontDistribution

  ##
  # CloudWatch Alarms
  ##
  AlarmsSnsTopic:
    Type: AWS::SNS::Topic
    Condition: AlarmsEnabledCondition
    Properties:
      DisplayName: !Sub ${AWS::StackName}-AlarmsSnsTopic

  RestApiLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: AlarmsEnabledCondition
    Properties:
      AlarmActions:
        - !Ref AlarmsSnsTopic
      AlarmDescription: !Sub RestApi high latency (${AWS::StackName}).
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: RestApi
          Value: !Ref RestApi
      EvaluationPeriods: 3
      InsufficientDataActions:
        - !Ref AlarmsSnsTopic
      MetricName: Latency
      Namespace: AWS/ApiGateway
      OKActions:
        - !Ref AlarmsSnsTopic
      Period: 60
      Statistic: Average
      Threshold: !Ref AlarmApiLatencyThreshold
      TreatMissingData: notBreaching

  CloudFrontDistributionHighRequestsAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: AlarmsEnabledCondition
    Properties:
      AlarmActions:
        - !Ref AlarmsSnsTopic
      AlarmDescription: !Sub CloudFront high requests (${AWS::StackName}).
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DistributionId
          Value: !Ref CloudFrontDistribution
        - Name: Region
          Value: Global
      EvaluationPeriods: 3
      InsufficientDataActions:
        - !Ref AlarmsSnsTopic
      MetricName: Requests
      Namespace: AWS/CloudFront
      OKActions:
        - !Ref AlarmsSnsTopic
      Period: 60
      Statistic: Sum
      Threshold: !Ref AlarmHighRequestsThreshold
      TreatMissingData: notBreaching
      Unit: Count

  CloudFrontDistribution4xxErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: AlarmsEnabledCondition
    Properties:
      AlarmActions:
        - !Ref AlarmsSnsTopic
      AlarmDescription: !Sub CloudFront 4xx errors (${AWS::StackName}).
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DistributionId
          Value: !Ref CloudFrontDistribution
        - Name: Region
          Value: Global
      EvaluationPeriods: 3
      InsufficientDataActions:
        - !Ref AlarmsSnsTopic
      MetricName: 4xxErrorRate
      Namespace: AWS/CloudFront
      OKActions:
        - !Ref AlarmsSnsTopic
      Period: 60
      Statistic: Average
      Threshold: !Ref AlarmHigh4xxErrorRateThreshold
      TreatMissingData: notBreaching

  CloudFrontDistribution5xxErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: AlarmsEnabledCondition
    Properties:
      AlarmActions:
        - !Ref AlarmsSnsTopic
      AlarmDescription: !Sub CloudFront 5xx errors (${AWS::StackName}).
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DistributionId
          Value: !Ref CloudFrontDistribution
        - Name: Region
          Value: Global
      EvaluationPeriods: 3
      InsufficientDataActions:
        - !Ref AlarmsSnsTopic
      MetricName: 5xxErrorRate
      Namespace: AWS/CloudFront
      OKActions:
        - !Ref AlarmsSnsTopic
      Period: 60
      Statistic: Average
      Threshold: !Ref AlarmHigh5xxErrorRateThreshold
      TreatMissingData: notBreaching

Outputs:

  AlarmSnsTopic:
    Condition: AlarmsEnabledCondition
    Value: !GetAtt AlarmsSnsTopic.TopicName

  ApiUrl:
    Value: !Sub https://${CloudFrontDistribution.DomainName}/api/v1

  DocumentationUrl:
    Value: !Sub https://${CloudFrontDistribution.DomainName}